AVLTree，继承自BST：
 * 重新定义AVLTree自己的【构造方法】
 * 重写【afterAdd方法】，用来解决添加导致的平衡；
    # 【更新高度】
    # 【恢复平衡】
 * 重新定义【静态内部类】，继承自 二叉树 的静态内部类TreeNode，新增height成员变量，用来记录平衡因子；
   重写【createNode方法】，供AVL树创建自己的节点，带有height成员变量的节点；
   二叉树的TreeNode静态内部类，不直接添加height的原因是，二叉树是通用的，不会因为AVL树需要平衡因子而加上height

添加 导致的失衡
 * 最坏情况：可能导致所有祖先节点都失衡
 * 注意：父节点、非祖父节点，都不可能失衡
 * 修复方式：找所有失衡节点中高度最低的那个祖先节点，并修复，这样整棵树的高度自然会恢复平衡；因为失衡就是由下往上导致的，把源头修复即可。
   # 找到三个节点
     g: 高度最低的那个不平衡节点
     p: g的左右子节点中高度最高的节点
     n: p的左右子节点中高度最高的节点
   # 判断旋转方向

