B树是一棵平衡的【多路】搜索树（多用于文件管理、数据库的实现），Balanced Tree
 * 一个节点，可以存储超过2个元素，可以拥有超过2个子节点
 * 依旧拥有二叉搜索树的一些性质，如基于元素的大小判断，对子节点进行位置摆放
 * 平衡，每个节点的子节点，高度都是一致的
 * 比较矮

m阶B树，一个节点最多有m个子节点（m>=2）
 * 假设一个节点的存储元素为x，则：根节点：1 <= x <= m-1
                            非根节点：ceiling(m/2)-1 <= x <= m-1
   【节点的子节点个数y = 节点的存储元素 + 1】，即节点如果有子节点，那么子节点个数y=x+1（左边1个右边1个中间n个）
                            根节点：2 <= y <= m
                            非根节点：ceiling(m/2) <= y <= m
                            例：3阶B树，非根节点个数 2<=y<=3，也称为(2,3)树，2-3树
                               4阶B树，非根节点个数 2<=y<=4，也称为(2,4)树，2-3-4树
                               5阶B树，非根节点个数 3<=y<=5，也称为(3,5)树，3-4-5树
                               6阶B树，非根节点个数 3<=y<=6，也称为(3,6)树
                               7阶B树，非根节点个数 4<=y<=7，也称为(4,7)树
   2阶B树，相当于二叉搜索树
 * 数据库实现，一般是200~300阶B树，即可以存储2、300个元素

B树 VS 二叉搜索树
 * B树与二叉搜索树，在逻辑上是等价的
 * 二叉搜索树的多代节点合并，形成一个超级节点
 * 二叉搜索树的2代节点合并，最多有 4 个子节点（即合并后的B树最少是 4阶B树）
   二叉搜索树的3代节点合并，最多有 8 个子节点（即合并后的B树最少是 8阶B树）
   二叉搜索树的n代节点合并，最多有 2^n 个子节点（即合并后的B树最少是 2^n阶B树）
 * m阶B树，最多需要log2 m代节点合并

B树的搜索：
 * 先在节点内部从小到大开始搜索元素
 * 如果匹配，则搜索结束；如果不匹配，则继续在对应的子节点搜索元素，重复步骤一

B树的添加：
 * 性质：【新添加的元素一定是添加到叶子节点中】
 * 如果叶子节点的元素个数超过最高限制（m-1）个，此现象称为上溢(overflow)
 * 解决上溢问题：
      # 上溢节点的元素个数必然等于 m
      # 假设上溢节点最中间元素的位置为k（如果是偶数位，那任意取ceiling(m/2)或floor(m/2)）
        将k位置的元素向上与父节点合并
        将 [0,k-1] 和 [k+1,m-1] 位置的元素分裂成2个子节点，这2个子节点的元素个数，必然都不会低于最低限制（ceiling(m/2)-1），因为我们取的k是中间位置元素
      # 一次分裂完毕后，有可能导致父节点上溢，那么依然按照上述方法解决；最极端的情况，可能一直分裂到根节点
      # B树的高度+1只有一种可能，即上溢到根节点

B树的删除
* 叶子节点：
  # 如果删除的元素在叶子节点中，那么直接删除即可
* 非叶子节点：
  # 先找到前驱/后继元素，将前驱/后继元素的val赋给删除节点node.val，之后删除前驱/后继节点
  # 可发现：非叶子节点的前驱/后继元素，必定在叶子节点中
  # 因此，这里的删除前驱/后继元素，就是删除叶子节点中的元素，即【删除元素的真正操作都是发生在叶子节点中】
* 叶子节点被删掉一个元素后，元素个数可能会低于最低限制（ceiling(m/2)-1），此现象称为下溢(underflow)
* 解决下溢问题：
      # 下溢节点的元素数量必然是 ceiling(m/2)-2
      # 如果下溢节点临近的兄弟节点，有至少 ceiling(m/2) 个元素，那么可以向兄弟节点借一个元素：
          将父节点的元素b 插入到下溢节点的 0位置（最小位置）；
          用兄弟节点的元素a（最大的元素）替代父节点的元素b；
          这种操作其实就是 旋转，注意元素a可能有子节点，旋转过后变为元素b的子节点（按B树的添加大小来排序）
      # 如果下溢节点临近的兄弟节点，只有 ceiling(m/2)-1 个元素，无法借给下溢节点（借了的话，兄弟节点也会出现下溢问题）：
          将父节点的元素b 挪下来，跟左右子节点合并；
          合并后的子节点元素个数为 ceiling(m/2)-1 + 1 + ceiling(m/2)-2 = ceiling(m/2)+ceiling(m/2)-2，不超过m-1；
          这个操作可能会导致父节点下溢，那么依然按照上述方法解决，下溢现象可能会一直向上传播至根节点；
          如果B树的高度减少，那么只有一种可能，即下溢到根节点，根节点与左右子节点合并成为新的根节点；


4阶B树，通过这个结构可以更好的理解红黑树
 * 所有节点可以储存的元素个数：1 <= x <= 3
 * 所有节点的子节点个数：2 <= y <= 4

