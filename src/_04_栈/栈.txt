栈是特殊的线性表，先进后出（First In Last Out FILO）
可以用ArrayList或LinkedList实现栈，官方是用Vector实现的，Vector与ArrayList类似，区别在于Vector的方法有synchronized修饰，是线程安全的

中缀表达式：将运算符写在两个操作数中间的表达式，运算符有不同的优先级，括号用于改变运算顺序，求值过程不能直接从左到右顺序进行，不利于计算机处理。
前缀表达式：将运算符写在两个操作数之前的表达式，前缀表达式没有括号，运算符没有优先级，求值过程严格按照从右到左的顺序计算，有利于计算机处理。
后缀表达式：将运算符写在两个操作数之后的表达式，后缀表达式中没有括号，运算符没有优先级。求值过程严格按照从左到右的顺序进行，有利于计算机处理。

1、将中缀表达式【(4+1*(5-2))-6/3】，转换为后缀表达式【4 1 5 2 - * + 6 3 / -】
step1：初始化一个栈和一个后缀表达式字符串
step2：从左到右 依次对中缀表达式中的每个字符进行以下处理，直到表达式结束
 * 如果字符是‘（’，将其入栈
 * 如果字符是数字，添加到后缀表达式的字符串中
 * 如果字符是运算符，先将栈顶优先级不低于该运算符的运算符出栈，添加到后缀表达式中，再将该运算符入栈。注意，当'('在栈中时，优先级最低
 * 如果字符是‘）’，将栈顶元素出栈，添加到后缀表达式中，直到出栈的是‘（’
step3：如果表达式结束，但栈中还有元素，将所有元素出栈，添加到后缀表达式中

2、将中缀表达式转换为前缀表达式【- + 4 * 1 - 5 2 / 6 3】
中缀表达式转换到前缀表达的方法和转换到后缀表达式过程一致，细节上有所变化
step1：初始化两个栈，s1和s2
step2：从右到左 依次对中缀表达式中的每个字符进行以下处理，直到表达式结束
 * 如果字符是‘)’，将其入栈s1
 * 如果字符是数字，添加到栈s2
 * 如果字符是运算符，先将s1栈中优先级不低于该运算符的运算符出栈，添加到s2中，再将该运算符入栈s1。当')'在栈中时，优先级最低
 * 如果字符是‘（’，将s1栈中元素出栈，添加到s2中，直到出栈的是‘）’
        step3：如果表达式结束，但s1栈中还有元素，将所有元素出栈，添加s2中
        step4：将栈s2中元素依次出栈，即得到前缀表达式

将中缀转为后缀/前缀后，计算机可以进行运算了，运算过程即由计算机将后缀/前缀转回中缀，计算
1、后缀表达式计算
    从左往右取字符，如果是数字，则入栈；如果是运算符，则取栈顶的两个数，从右往左计算；后出现的先运算，所以需要一个栈辅助操作
    如：a b -， 栈中为：b a，出栈为 b a , 计算为 a - b，计算结果入栈

step1：设置一个栈
step2：从左到右对后缀表达式中的字符进行以下处理：
 * 如果字符是数字，现将其转化为数字，然后入栈
 * 如果字符是运算符，出栈两个值进行计算。计算结果入栈
 * 重复以上步骤，直到后缀表达式扫描结束，栈中最后一个元素就是表达式的结果。
给定后缀表达式4 1 5 2 - * + 6 3 / -，依次将4 1 5 2 入栈，当扫描到-时，2,5出栈，计算5-2=3；将3入栈，此时栈中元素为4 1 3。
接着扫描到*，3 1出栈，计算1*3=3,3入栈，栈中元素为4 3。
扫描+，3 4出栈，计算4+3=7,7入栈。接着6 3 入栈，栈中该元素为7 6 3。
扫描到/，3 6出栈，计算6/3=2,2入栈，栈中元素为7 2.扫描-，2 7 出栈，计算7-2=5,5入栈。
表达式扫描完毕，栈中元素为5，表达式结果为5.

2、前缀表达式计算
    从右往左取字符，如果是数字，则入栈；如果是运算符，则取栈顶的两个数，从左往右计算；
    如：a b -， 栈中为：a b，出栈为 a b , 计算为 a - b，计算结果入栈，继续扫描前缀表达式



算式表达式和表达式树的关系如下：
    表达式树的先根遍历：前缀表达式
    表达式树的中根遍历：中缀表达式
    表达式树的后根遍历：后缀表达式

给定一个表达式的中缀形式：(4+1*(5-2))-6/3，转为表达式树：找到"最后计算"的运算符(它是整棵表达式树的根)，然后递归处理
    首先将每个运算加上括号，区分优先级，得到(4+(1*(5-2)))-(6/3)
    括号外的-优先级最低，作为根节点，(4+(1*(5-2)))作为左子树，(6/3)作为右子树；
    递归的转换4+(1*(5-2))，+最为根节点，4是左子树，(1*(5-2))是右子树。
    *是右子树的根节点，1是左子树，(5-2)是右子树。最后计算(5-2)，-是根节点，5是左子树，2是右子树。
    构造好表达式树之后，前缀表达式和中缀表达式可根据先根遍历和后根遍历得到。
    前缀表达式：- + 4 * 1 - 5 2 / 6 3
    后缀表达式：4 1 5 2 - * + 6 3 / -

总结：中缀转前缀/后缀，可以通过表达式树、栈
     前缀和后缀更适合计算机处理，中缀是我们人类常用的计算方式

练习：20、有效的括号
     150、逆波兰表达式求值（后缀表达式）
     224、基本计算器
     856、括号的分数
